This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: package.json, angular.json, tsconfig.json, tsconfig.app.json, tailwind.config.js, vite.config.ts, src/**/*.{ts,tsx,css}
- Files matching these patterns are excluded: *.test.*, *.spec.*, coverage/**, dist/**, .env*, *.db, *.sqlite
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<user_provided_header>
Fresh Project Home Showcase
</user_provided_header>

<directory_structure>
angular.json
package.json
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.server.ts
src/app/app.config.ts
src/app/app.routes.ts
src/app/components/floor-plan.component.ts
src/app/components/layout.component.ts
src/app/components/property-card.component.ts
src/app/components/property-stats.component.ts
src/app/components/room-details.component.ts
src/app/models/property.model.ts
src/app/models/room.model.ts
src/app/pages/index.page.ts
src/app/pages/property/[id].page.ts
src/app/services/property.service.ts
src/app/services/room.service.ts
src/main.server.ts
src/main.ts
src/server/routes/api/v1/hello.ts
src/server/routes/api/v1/properties.get.ts
src/server/routes/api/v1/rooms.get.ts
src/server/routes/api/v1/rooms/[id].get.ts
src/styles.css
src/test-setup.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/app.routes.ts">
 1: import { Routes } from '@angular/router';
 2: import { LayoutComponent } from './components/layout.component';
 3: export const routes: Routes = [
 4:   {
 5:     path: '',
 6:     component: LayoutComponent,
 7:     children: [
 8:       {
 9:         path: '',
10:         loadComponent: () => import('./pages/index.page'),
11:       },
12:       {
13:         path: 'property/:id',
14:         loadComponent: () => import('./pages/property/[id].page'),
15:       }
16:     ]
17:   }
18: ];
</file>

<file path="src/app/components/floor-plan.component.ts">
 1: import { Component, EventEmitter, Input, Output } from '@angular/core';
 2: import { CommonModule } from '@angular/common';
 3: import { Room } from '../models/room.model';
 4: @Component({
 5:   selector: 'app-floor-plan',
 6:   standalone: true,
 7:   imports: [CommonModule],
 8:   template: `
 9:     <div class="w-full">
10:       <h3 class="text-xl font-medium text-dark-text mb-4">Interactive Floorplan</h3>
11:       <div class="floorplan-container w-full relative">
12:         <img src="/assets/images/floorplan.jpg" alt="Floorplan" class="w-full border border-gray-200 rounded-lg" useMap="#floorplan">
13:         <map name="floorplan">
14:           <area *ngFor="let room of rooms"
15:                 [id]="room.id"
16:                 [alt]="room.name"
17:                 [title]="room.name"
18:                 [attr.shape]="'rect'"
19:                 [attr.coords]="room.coordinates.x + ',' + room.coordinates.y + ',' +
20:                               (room.coordinates.x + room.coordinates.width) + ',' +
21:                               (room.coordinates.y + room.coordinates.height)"
22:                 (click)="selectRoom(room.id)"
23:                 style="cursor:pointer;">
24:         </map>
25:         <div *ngFor="let room of rooms"
26:              [style.left.px]="room.coordinates.x + (room.coordinates.width / 2) - 50"
27:              [style.top.px]="room.coordinates.y + (room.coordinates.height / 2) - 10"
28:              [class.bg-primary]="activeRoom === room.id"
29:              [class.bg-opacity-70]="activeRoom === room.id"
30:              [class.bg-gray-500]="activeRoom !== room.id"
31:              [class.bg-opacity-50]="activeRoom !== room.id"
32:              class="absolute px-2 py-1 rounded text-white text-sm transition-colors duration-300 pointer-events-none">
33:           {{ room.name.split(' ')[0] }}
34:         </div>
35:       </div>
36:       <p class="text-sm text-light-text mt-4">Click on a room to view details</p>
37:     </div>
38:   `,
39:   styles: [`
40:     .floorplan-container {
41:       max-width: 800px;
42:       margin: 0 auto;
43:     }
44:   `]
45: })
46: export class FloorPlanComponent {
47:   @Input() rooms: Room[] = [];
48:   @Input() activeRoom: string = '';
49:   @Output() roomSelected = new EventEmitter<string>();
50:   selectRoom(roomId: string) {
51:     this.roomSelected.emit(roomId);
52:   }
53: }
</file>

<file path="src/app/components/layout.component.ts">
 1: import { Component } from '@angular/core';
 2: import { RouterOutlet } from '@angular/router';
 3: @Component({
 4:   selector: 'app-layout',
 5:   standalone: true,
 6:   imports: [RouterOutlet],
 7:   template: `
 8:     <!-- Header -->
 9:     <header class="bg-white shadow-sm">
10:       <div class="container mx-auto px-4 py-4 flex justify-between items-center">
11:         <a href="/" class="flex items-center">
12:           <span class="text-xl font-medium text-primary">Fresh Projects</span>
13:           <span class="ml-2 text-xl font-medium text-dark-text">Spaces</span>
14:         </a>
15:         <nav class="hidden md:block">
16:           <ul class="flex space-x-8">
17:             <li><a href="/" class="text-light-text hover:text-primary transition">Home</a></li>
18:             <li><a href="#" class="text-light-text hover:text-primary transition">Listings</a></li>
19:             <li><a href="#" class="text-light-text hover:text-primary transition">Contact</a></li>
20:           </ul>
21:         </nav>
22:       </div>
23:     </header>
24:     <main>
25:       <router-outlet></router-outlet>
26:     </main>
27:     <!-- Footer -->
28:     <footer class="bg-dark-background text-white py-8">
29:       <div class="container mx-auto px-4">
30:         <div class="flex flex-col md:flex-row justify-between items-center">
31:           <div class="mb-4 md:mb-0">
32:             <a href="/" class="flex items-center">
33:               <span class="text-xl font-medium text-primary">Fresh Projects</span>
34:               <span class="ml-2 text-xl font-medium text-white">Spaces</span>
35:             </a>
36:           </div>
37:           <div class="text-center md:text-right">
38:             <p class="text-gray-400">&copy; 2025 Fresh Projects Spaces. All rights reserved.</p>
39:           </div>
40:         </div>
41:       </div>
42:     </footer>
43:   `
44: })
45: export class LayoutComponent {}
</file>

<file path="src/app/components/property-card.component.ts">
 1: import { Component, Input } from '@angular/core';
 2: import { RouterLink } from '@angular/router';
 3: import { Property } from '../models/property.model';
 4: @Component({
 5:   selector: 'app-property-card',
 6:   standalone: true,
 7:   imports: [RouterLink],
 8:   template: `
 9:     <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
10:       <div class="h-48 bg-gray-200 relative">
11:         <img [src]="property.thumbnail" [alt]="property.title" class="w-full h-full object-cover">
12:         <div class="absolute top-4 right-4 bg-primary text-white px-2 py-1 rounded text-sm font-medium">
13:           For Sale
14:         </div>
15:       </div>
16:       <div class="p-4">
17:         <h3 class="text-lg font-medium text-dark-text mb-1">{{ property.title }}</h3>
18:         <p class="text-light-text mb-2">{{ property.address }}</p>
19:         <p class="text-primary font-medium mb-3">{{ property.price }}</p>
20:         <div class="flex justify-between text-light-text text-sm">
21:           <span>{{ property.stats.bedrooms }} Bed{{ property.stats.bedrooms !== 1 ? 's' : '' }}</span>
22:           <span>{{ property.stats.bathrooms }} Bath{{ property.stats.bathrooms !== 1 ? 's' : '' }}</span>
23:           <span>{{ property.stats.area }}</span>
24:         </div>
25:         <div class="mt-4">
26:           <a [routerLink]="['/property', property.id]" class="bg-primary text-white px-4 py-2 rounded-lg inline-block hover:opacity-90 transition-opacity duration-300">View Details</a>
27:         </div>
28:       </div>
29:     </div>
30:   `
31: })
32: export class PropertyCardComponent {
33:   @Input() property!: Property;
34: }
</file>

<file path="src/app/components/property-stats.component.ts">
 1: import { Component, Input } from '@angular/core';
 2: import { CommonModule } from '@angular/common';
 3: import { Property } from '../models/property.model';
 4: @Component({
 5:   selector: 'app-property-stats',
 6:   standalone: true,
 7:   imports: [CommonModule],
 8:   template: `
 9:     <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
10:       <div class="bg-light-background rounded-lg p-4 text-center">
11:         <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto mb-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
12:           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
13:         </svg>
14:         <h3 class="text-dark-text font-medium mb-1">Property Type</h3>
15:         <p class="text-light-text">{{ property.stats.type }}</p>
16:       </div>
17:       <div class="bg-light-background rounded-lg p-4 text-center">
18:         <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto mb-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
19:           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
20:         </svg>
21:         <h3 class="text-dark-text font-medium mb-1">Bedrooms</h3>
22:         <p class="text-light-text">{{ property.stats.bedrooms }}</p>
23:       </div>
24:       <div class="bg-light-background rounded-lg p-4 text-center">
25:         <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto mb-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
26:           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
27:         </svg>
28:         <h3 class="text-dark-text font-medium mb-1">Bathrooms</h3>
29:         <p class="text-light-text">{{ property.stats.bathrooms }}</p>
30:       </div>
31:       <div class="bg-light-background rounded-lg p-4 text-center">
32:         <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto mb-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
33:           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
34:         </svg>
35:         <h3 class="text-dark-text font-medium mb-1">Area</h3>
36:         <p class="text-light-text">{{ property.stats.area }}</p>
37:       </div>
38:     </div>
39:   `
40: })
41: export class PropertyStatsComponent {
42:   @Input() property!: Property;
43: }
</file>

<file path="src/app/components/room-details.component.ts">
 1: import { Component, Input, OnChanges } from '@angular/core';
 2: import { CommonModule } from '@angular/common';
 3: import { Room } from '../models/room.model'
 4: import { RoomService } from '../services/room.service';
 5: @Component({
 6:   selector: 'app-room-details',
 7:   standalone: true,
 8:   imports: [CommonModule],
 9:   template: `
10:     <div *ngIf="room" class="w-full">
11:       <h3 class="text-xl font-medium text-dark-text mb-2">{{ room.name }}</h3>
12:       <p class="text-light-text mb-4">{{ room.description }}</p>
13:       <!-- Room Photos -->
14:       <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
15:         <div *ngFor="let photo of room.photos" class="bg-gray-200 rounded-lg overflow-hidden h-56">
16:           <img [src]="photo" [alt]="room.name" class="w-full h-full object-cover">
17:         </div>
18:       </div>
19:       <!-- Room Features -->
20:       <div>
21:         <h4 class="text-lg font-medium text-dark-text mb-2">Features</h4>
22:         <ul class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
23:           <li *ngFor="let feature of room.features" class="flex items-start">
24:             <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
25:               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
26:             </svg>
27:             <span class="text-light-text">{{ feature }}</span>
28:           </li>
29:         </ul>
30:       </div>
31:     </div>
32:     <div *ngIf="!room" class="w-full text-center py-8">
33:       <p class="text-light-text">Select a room from the floorplan to view details</p>
34:     </div>
35:   `
36: })
37: export class RoomDetailsComponent implements OnChanges {
38:   @Input() roomId: string = '';
39:   room?: Room;
40:   constructor(private roomService: RoomService) {}
41:   ngOnChanges(): void {
42:     if (this.roomId) {
43:       this.roomService.getRoom(this.roomId).subscribe(room => {
44:         this.room = room;
45:       });
46:     }
47:   }
48: }
</file>

<file path="src/app/models/property.model.ts">
 1: export interface Property {
 2:   id: string;
 3:   title: string;
 4:   address: string;
 5:   price: string;
 6:   thumbnail: string;
 7:   description: string;
 8:   stats: {
 9:     bedrooms: number;
10:     bathrooms: number;
11:     area: string;
12:     type: string;
13:   };
14: }
</file>

<file path="src/app/models/room.model.ts">
 1: export interface Room {
 2:   id: string;
 3:   name: string;
 4:   description: string;
 5:   features: string[];
 6:   photos: string[];
 7:   coordinates: {
 8:     x: number;
 9:     y: number;
10:     width: number;
11:     height: number;
12:   };
13: }
</file>

<file path="src/app/pages/property/[id].page.ts">
 1: import { Component, OnInit } from '@angular/core';
 2: import { CommonModule } from '@angular/common';
 3: import { ActivatedRoute } from '@angular/router';
 4: import { switchMap } from 'rxjs/operators';
 5: import { PropertyService } from '../../services/property.service';
 6: import { RoomService } from '../../services/room.service';
 7: import { Property } from '../../models/property.model';
 8: import { Room } from '../../models/room.model';
 9: import { PropertyStatsComponent } from '../../components/property-stats.component';
10: import { FloorPlanComponent } from '../../components/floor-plan.component';
11: import { RoomDetailsComponent } from '../../components/room-details.component';
12: @Component({
13:   selector: 'app-property-detail',
14:   standalone: true,
15:   imports: [
16:     CommonModule,
17:     PropertyStatsComponent,
18:     FloorPlanComponent,
19:     RoomDetailsComponent
20:   ],
21:   template: `
22:     <div class="container mx-auto px-4 py-8" *ngIf="property">
23:       <!-- Property Title & Price Section -->
24:       <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
25:         <div>
26:           <h1 class="text-3xl md:text-4xl font-medium text-dark-text mb-2">{{ property.title }}</h1>
27:           <p class="text-light-text text-lg">{{ property.address }}</p>
28:         </div>
29:         <div class="mt-4 md:mt-0">
30:           <p class="text-primary text-2xl md:text-3xl font-medium">{{ property.price }}</p>
31:         </div>
32:       </div>
33:       <!-- Property Gallery (Simplified) -->
34:       <div class="mb-8">
35:         <div class="bg-gray-200 rounded-lg overflow-hidden h-64 md:h-96">
36:           <img [src]="property.thumbnail" [alt]="property.title" class="w-full h-full object-cover">
37:         </div>
38:       </div>
39:       <!-- Property Stats -->
40:       <app-property-stats [property]="property"></app-property-stats>
41:       <!-- Property Description -->
42:       <div class="bg-white rounded-lg shadow p-6 mb-8">
43:         <h2 class="text-2xl font-medium text-dark-text mb-4">About this property</h2>
44:         <p class="text-light-text">{{ property.description }}</p>
45:       </div>
46:       <!-- Floorplan & Room Details Section -->
47:       <div class="flex flex-col md:flex-row gap-8 mb-12">
48:         <!-- Floorplan Column -->
49:         <div class="w-full md:w-1/2 bg-white rounded-lg shadow p-6">
50:           <app-floor-plan
51:             [rooms]="rooms"
52:             [activeRoom]="selectedRoomId"
53:             (roomSelected)="onRoomSelected($event)">
54:           </app-floor-plan>
55:         </div>
56:         <!-- Room Details Column -->
57:         <div class="w-full md:w-1/2 bg-white rounded-lg shadow p-6">
58:           <app-room-details [roomId]="selectedRoomId"></app-room-details>
59:         </div>
60:       </div>
61:     </div>
62:   `
63: })
64: export default class PropertyDetailPage implements OnInit {
65:   property?: Property;
66:   rooms: Room[] = [];
67:   selectedRoomId: string = '';
68:   constructor(
69:     private route: ActivatedRoute,
70:     private propertyService: PropertyService,
71:     private roomService: RoomService
72:   ) {}
73:   ngOnInit(): void {
74:     // Get property ID from route
75:     this.route.paramMap.pipe(
76:       switchMap(params => {
77:         const id = params.get('id') ?? '';
78:         return this.propertyService.getProperty(id);
79:       })
80:     ).subscribe(property => {
81:       this.property = property;
82:     });
83:     this.roomService.getRooms().subscribe(rooms => {
84:       this.rooms = rooms;
85:       if (rooms.length > 0) {
86:         this.selectedRoomId = rooms[0].id;
87:       }
88:     });
89:   }
90:   onRoomSelected(roomId: string): void {
91:     this.selectedRoomId = roomId;
92:   }
93: }
</file>

<file path="src/app/services/property.service.ts">
 1: import { Injectable } from '@angular/core';
 2: import { HttpClient } from '@angular/common/http';
 3: import { Observable } from 'rxjs';
 4: import { Property } from '../models/property.model';
 5: @Injectable({
 6:   providedIn: 'root'
 7: })
 8: export class PropertyService {
 9:   constructor(private http: HttpClient) {}
10:   getProperties(): Observable<Property[]> {
11:     return this.http.get<Property[]>('/api/v1/properties');
12:   }
13:   getProperty(id: string): Observable<Property> {
14:     return this.http.get<Property>(`/api/v1/properties/${id}`);
15:   }
16: }
</file>

<file path="src/app/services/room.service.ts">
 1: import { Injectable } from '@angular/core';
 2: import { HttpClient } from '@angular/common/http';
 3: import { Observable } from 'rxjs';
 4: import { Room } from '../models/room.model';
 5: @Injectable({
 6:   providedIn: 'root'
 7: })
 8: export class RoomService {
 9:   constructor(private http: HttpClient) {}
10:   getRooms(): Observable<Room[]> {
11:     return this.http.get<Room[]>('/api/v1/rooms');
12:   }
13:   getRoom(id: string): Observable<Room> {
14:     return this.http.get<Room>(`/api/v1/rooms/${id}`);
15:   }
16: }
</file>

<file path="src/server/routes/api/v1/properties.get.ts">
1: import { defineEventHandler } from 'h3';
2: import fs from 'fs';
3: import path from 'path';
4: export default defineEventHandler(() => {
5:   const filePath = path.join(process.cwd(), 'src/server/data/properties.json');
6:   const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
7:   return data;
8: });
</file>

<file path="src/server/routes/api/v1/rooms.get.ts">
1: import { defineEventHandler } from 'h3';
2: import fs from 'fs';
3: import path from 'path';
4: export default defineEventHandler(() => {
5:   const filePath = path.join(process.cwd(), 'src/server/data/rooms.json');
6:   const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
7:   return data;
8: });
</file>

<file path="src/server/routes/api/v1/rooms/[id].get.ts">
 1: import { defineEventHandler, getRouterParam, createError } from 'h3';
 2: import fs from 'fs';
 3: import path from 'path';
 4: export default defineEventHandler((event) => {
 5:   const id = getRouterParam(event, 'id');
 6:   const filePath = path.join(process.cwd(), 'src/server/data/rooms.json');
 7:   const rooms = JSON.parse(fs.readFileSync(filePath, 'utf8'));
 8:   const room = rooms.find((r: { id: string }) => r.id === id);
 9:   if (!room) {
10:     throw createError({
11:       statusCode: 404,
12:       statusMessage: 'Room not found'
13:     });
14:   }
15:   return room;
16: });
</file>

<file path="tailwind.config.js">
 1: module.exports = {
 2:   content: [
 3:     "./src/**/*.{html,ts}",
 4:   ],
 5:   theme: {
 6:     extend: {
 7:       colors: {
 8:         primary: '#74BA43',
 9:         success: '#42758F',
10:         warning: '#EB6209',
11:         'dark-background': '#3D3D3C',
12:         'light-background': '#F0F5FF',
13:         'dark-text': '#152542',
14:         'light-text': '#3E547C',
15:         'custom-0': '#54565a',
16:         'custom-1': '#f16022',
17:         'custom-2': '#42758f',
18:         'custom-3': '#f19b76',
19:         'custom-4': '#FFFFFF',
20:         'custom-5': '#91bd77',
21:         'custom-6': '#F8F8F8',
22:         'custom-7': '#777777',
23:       },
24:       fontFamily: {
25:         raleway: ['Raleway', 'sans-serif'],
26:         inter: ['Inter', 'sans-serif'],
27:       },
28:       boxShadow: {
29:         'sm': '0px 1px 3px rgba(0, 0, 0, 0.12)',
30:         'md': '0px 5px 20px -5px rgba(0, 0, 0, 0.15)',
31:         'lg': '0px 10px 25px -8px rgba(0, 0, 0, 0.25)',
32:         'xl': '0px 20px 40px -10px rgba(0, 0, 0, 0.25)',
33:       }
34:     },
35:   },
36:   plugins: [],
37: }
</file>

<file path="angular.json">
 1: {
 2:   "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
 3:   "version": 1,
 4:   "newProjectRoot": "projects",
 5:   "projects": {
 6:     "my-app": {
 7:       "projectType": "application",
 8:       "root": ".",
 9:       "sourceRoot": "src",
10:       "prefix": "app",
11:       "architect": {
12:         "build": {
13:           "builder": "@analogjs/platform:vite",
14:           "options": {
15:             "configFile": "vite.config.ts",
16:             "main": "src/main.ts",
17:             "outputPath": "dist/client",
18:             "tsConfig": "tsconfig.app.json"
19:           },
20:           "defaultConfiguration": "production",
21:           "configurations": {
22:             "development": {
23:               "mode": "development"
24:             },
25:             "production": {
26:               "sourcemap": false,
27:               "mode": "production"
28:             }
29:           }
30:         },
31:         "serve": {
32:           "builder": "@analogjs/platform:vite-dev-server",
33:           "defaultConfiguration": "development",
34:           "options": {
35:             "buildTarget": "my-app:build",
36:             "port": 5173
37:           },
38:           "configurations": {
39:             "development": {
40:               "buildTarget": "my-app:build:development",
41:               "hmr": true
42:             },
43:             "production": {
44:               "buildTarget": "my-app:build:production"
45:             }
46:           }
47:         },
48:         "test": {
49:           "builder": "@analogjs/vitest-angular:test"
50:         }
51:       }
52:     }
53:   },
54:   "cli": {
55:     "analytics": false
56:   }
57: }
</file>

<file path="package.json">
 1: {
 2:   "name": "house-showcase",
 3:   "version": "0.0.0",
 4:   "type": "module",
 5:   "engines": {
 6:     "node": ">=18.19.1"
 7:   },
 8:   "scripts": {
 9:     "ng": "ng",
10:     "dev": "ng serve",
11:     "start": "npm run dev",
12:     "build": "ng build",
13:     "watch": "ng build --watch --configuration development",
14:     "test": "ng test"
15:   },
16:   "private": true,
17:   "dependencies": {
18:     "@analogjs/content": "^1.16.1",
19:     "@analogjs/router": "^1.16.1",
20:     "@angular/animations": "^19.0.0",
21:     "@angular/common": "^19.0.0",
22:     "@angular/compiler": "^19.0.0",
23:     "@angular/core": "^19.0.0",
24:     "@angular/forms": "^19.0.0",
25:     "@angular/platform-browser": "^19.0.0",
26:     "@angular/platform-browser-dynamic": "^19.0.0",
27:     "@angular/platform-server": "^19.0.0",
28:     "@angular/router": "^19.0.0",
29:     "@tailwindcss/vite": "^4.1.4",
30:     "front-matter": "^4.0.2",
31:     "marked": "^15.0.7",
32:     "marked-gfm-heading-id": "^4.1.1",
33:     "marked-highlight": "^2.2.1",
34:     "marked-mangle": "^1.1.10",
35:     "postcss": "^8.5.3",
36:     "prismjs": "^1.29.0",
37:     "rxjs": "~7.8.0",
38:     "tailwindcss": "^4.1.4",
39:     "tslib": "^2.3.0",
40:     "zone.js": "~0.15.0"
41:   },
42:   "devDependencies": {
43:     "@analogjs/platform": "^1.16.1",
44:     "@analogjs/vite-plugin-angular": "^1.16.1",
45:     "@analogjs/vitest-angular": "^1.16.1",
46:     "@angular-devkit/build-angular": "^19.0.0",
47:     "@angular/build": "^19.0.0",
48:     "@angular/cli": "^19.0.0",
49:     "@angular/compiler-cli": "^19.0.0",
50:     "jsdom": "^22.0.0",
51:     "typescript": "~5.8.0",
52:     "vite": "^6.0.0",
53:     "vite-tsconfig-paths": "^4.2.0",
54:     "vitest": "^3.0.0"
55:   }
56: }
</file>

<file path="src/app/app.component.spec.ts">
 1: import { TestBed } from '@angular/core/testing';
 2: import { provideRouter } from '@angular/router';
 3: import { provideLocationMocks } from '@angular/common/testing';
 4: import { AppComponent } from './app.component';
 5: describe('AppComponent', () => {
 6:   beforeEach(async () => {
 7:     await TestBed.configureTestingModule({
 8:       imports: [AppComponent],
 9:       providers: [provideRouter([]), provideLocationMocks()],
10:     }).compileComponents();
11:   });
12:   it('should create the app', () => {
13:     const fixture = TestBed.createComponent(AppComponent);
14:     const app = fixture.componentInstance;
15:     expect(app).toBeTruthy();
16:   });
17: });
</file>

<file path="src/app/app.component.ts">
 1: import { Component } from '@angular/core';
 2: import { RouterOutlet } from '@angular/router';
 3: @Component({
 4:   selector: 'app-root',
 5:   standalone: true,
 6:   imports: [RouterOutlet],
 7:   template: `<router-outlet />`,
 8:   styles: `
 9:     :host {
10:       max-width: 1280px;
11:       margin: 0 auto;
12:       padding: 2rem;
13:       text-align: center;
14:     }
15:   `,
16: })
17: export class AppComponent {}
</file>

<file path="src/app/app.config.server.ts">
1: import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
2: import { provideServerRendering } from '@angular/platform-server';
3: import { appConfig } from './app.config';
4: const serverConfig: ApplicationConfig = {
5:   providers: [provideServerRendering()],
6: };
7: export const config = mergeApplicationConfig(appConfig, serverConfig);
</file>

<file path="src/app/app.config.ts">
 1: import {
 2:   provideHttpClient,
 3:   withFetch,
 4:   withInterceptors,
 5: } from '@angular/common/http';
 6: import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
 7: import { provideClientHydration } from '@angular/platform-browser';
 8: import { provideFileRouter, requestContextInterceptor } from '@analogjs/router';
 9: export const appConfig: ApplicationConfig = {
10:   providers: [
11:     provideZoneChangeDetection({ eventCoalescing: true }),
12:     provideFileRouter(),
13:     provideHttpClient(
14:       withFetch(),
15:       withInterceptors([requestContextInterceptor])
16:     ),
17:     provideClientHydration(),
18:   ],
19: };
</file>

<file path="src/app/pages/index.page.ts">
 1: import { Component, OnInit } from '@angular/core';
 2: import { CommonModule } from '@angular/common';
 3: import { PropertyCardComponent } from '../components/property-card.component';
 4: import { PropertyService } from '../services/property.service';
 5: import { Property } from '../models/property.model';
 6: @Component({
 7:   selector: 'app-home',
 8:   standalone: true,
 9:   imports: [CommonModule, PropertyCardComponent],
10:   template: `
11:     <div class="container mx-auto px-4 py-8">
12:       <header class="mb-8">
13:         <h1 class="text-3xl md:text-4xl font-medium text-dark-text mb-2">Fresh Projects Spaces</h1>
14:         <p class="text-light-text text-lg">Find your perfect home</p>
15:       </header>
16:       <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
17:         <app-property-card *ngFor="let property of properties" [property]="property"></app-property-card>
18:       </div>
19:     </div>
20:   `
21: })
22: export default class HomePage implements OnInit {
23:   properties: Property[] = [];
24:   constructor(private propertyService: PropertyService) {}
25:   ngOnInit(): void {
26:     this.propertyService.getProperties().subscribe(properties => {
27:       this.properties = properties;
28:     });
29:   }
30: }
</file>

<file path="src/main.server.ts">
1: import 'zone.js/node';
2: import '@angular/platform-server/init';
3: import { render } from '@analogjs/router/server';
4: import { AppComponent } from './app/app.component';
5: import { config } from './app/app.config.server';
6: export default render(AppComponent, config);
</file>

<file path="src/main.ts">
1: import 'zone.js';
2: import { bootstrapApplication } from '@angular/platform-browser';
3: import { AppComponent } from './app/app.component';
4: import { appConfig } from './app/app.config';
5: bootstrapApplication(AppComponent, appConfig);
</file>

<file path="src/server/routes/api/v1/hello.ts">
1: import { defineEventHandler } from 'h3';
2: export default defineEventHandler(() => ({ message: 'Hello World' }));
</file>

<file path="src/styles.css">
  1: @import 'tailwindcss';
  2: @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=Raleway:wght@300;400;500;600&display=swap');
  3: :root {
  4:   --color-primary: #74BA43;
  5:   --color-success: #42758F;
  6:   --color-warning: #EB6209;
  7:   --color-dark-background: #3D3D3C;
  8:   --color-light-background: #F0F5FF;
  9:   --color-dark-text: #152542;
 10:   --color-light-text: #3E547C;
 11:   --font-family-0: 'Raleway', sans-serif;
 12:   --font-family-1: 'Inter', sans-serif;
 13:   font-family: var(--font-family-1), Avenir, Helvetica, Arial, sans-serif;
 14:   font-size: 16px;
 15:   line-height: 24px;
 16:   font-weight: 400;
 17:   color: var(--color-dark-text);
 18:   background-color: #f8f9fa;
 19:   font-synthesis: none;
 20:   text-rendering: optimizeLegibility;
 21:   -webkit-font-smoothing: antialiased;
 22:   -moz-osx-font-smoothing: grayscale;
 23:   -webkit-text-size-adjust: 100%;
 24: }
 25: body {
 26:   margin: 0;
 27:   min-width: 320px;
 28:   min-height: 100vh;
 29: }
 30: h1, h2, h3, h4, h5, h6 {
 31:   font-family: var(--font-family-1);
 32:   color: var(--color-dark-text);
 33:   line-height: 1.3;
 34: }
 35: h1 {
 36:   font-size: 2.5rem;
 37:   font-weight: 500;
 38: }
 39: h2 {
 40:   font-size: 2rem;
 41:   font-weight: 400;
 42: }
 43: h3 {
 44:   font-size: 1.5rem;
 45:   font-weight: 400;
 46: }
 47: p {
 48:   color: var(--color-light-text);
 49:   line-height: 1.6;
 50: }
 51: a {
 52:   font-weight: 500;
 53:   color: var(--color-primary);
 54:   text-decoration: inherit;
 55: }
 56: a:hover {
 57:   opacity: 0.9;
 58: }
 59: button {
 60:   border-radius: 8px;
 61:   border: 1px solid transparent;
 62:   padding: 0.6em 1.2em;
 63:   font-size: 1em;
 64:   font-weight: 500;
 65:   font-family: var(--font-family-1);
 66:   background-color: var(--color-primary);
 67:   color: white;
 68:   cursor: pointer;
 69:   transition: opacity 0.25s;
 70: }
 71: button:hover {
 72:   opacity: 0.9;
 73: }
 74: button:focus,
 75: button:focus-visible {
 76:   outline: 4px auto var(--color-primary);
 77: }
 78: .bg-primary {
 79:   background-color: var(--color-primary);
 80: }
 81: .text-primary {
 82:   color: var(--color-primary);
 83: }
 84: .border-primary {
 85:   border-color: var(--color-primary);
 86: }
 87: .bg-success {
 88:   background-color: var(--color-success);
 89: }
 90: .text-success {
 91:   color: var(--color-success);
 92: }
 93: .bg-warning {
 94:   background-color: var(--color-warning);
 95: }
 96: .text-warning {
 97:   color: var(--color-warning);
 98: }
 99: .bg-dark-background {
100:   background-color: var(--color-dark-background);
101: }
102: .text-dark-text {
103:   color: var(--color-dark-text);
104: }
105: .text-light-text {
106:   color: var(--color-light-text);
107: }
108: .bg-light-background {
109:   background-color: var(--color-light-background);
110: }
</file>

<file path="src/test-setup.ts">
 1: import '@analogjs/vitest-angular/setup-zone';
 2: import {
 3:   BrowserDynamicTestingModule,
 4:   platformBrowserDynamicTesting,
 5: } from '@angular/platform-browser-dynamic/testing';
 6: import { getTestBed } from '@angular/core/testing';
 7: getTestBed().initTestEnvironment(
 8:   BrowserDynamicTestingModule,
 9:   platformBrowserDynamicTesting()
10: );
</file>

<file path="src/vite-env.d.ts">
1: 
</file>

<file path="tsconfig.app.json">
 1: /* To learn more about this file see: https://angular.io/config/tsconfig. */
 2: {
 3:   "extends": "./tsconfig.json",
 4:   "compilerOptions": {
 5:     "outDir": "./out-tsc/app",
 6:     "types": []
 7:   },
 8:   "files": ["src/main.ts", "src/main.server.ts"],
 9:   "include": [
10:     "src/**/*.d.ts",
11:     "src/app/pages/**/*.page.ts",
12:     "src/server/middleware/**/*.ts"
13:   ]
14: }
</file>

<file path="tsconfig.json">
 1: /* To learn more about this file see: https://angular.io/config/tsconfig. */
 2: {
 3:   "compileOnSave": false,
 4:   "compilerOptions": {
 5:     "baseUrl": "./",
 6:     "outDir": "./dist/out-tsc",
 7:     "forceConsistentCasingInFileNames": true,
 8:     "strict": true,
 9:     "noImplicitOverride": true,
10:     "noPropertyAccessFromIndexSignature": true,
11:     "noImplicitReturns": true,
12:     "noFallthroughCasesInSwitch": true,
13:     "sourceMap": true,
14:     "declaration": false,
15:     "downlevelIteration": true,
16:     "experimentalDecorators": true,
17:     "moduleResolution": "bundler",
18:     "isolatedModules": true,
19:     "importHelpers": true,
20:     "target": "ES2022",
21:     "module": "ES2022",
22:     "lib": ["ES2022", "dom"],
23:     "useDefineForClassFields": false,
24:     "skipLibCheck": true
25:   },
26:   "angularCompilerOptions": {
27:     "enableI18nLegacyMessageIdFormat": false,
28:     "strictInjectionParameters": true,
29:     "strictInputAccessModifiers": true,
30:     "strictTemplates": true
31:   }
32: }
</file>

<file path="vite.config.ts">
 1: import { defineConfig } from 'vite';
 2: import analog from '@analogjs/platform';
 3: export default defineConfig(({ mode }) => ({
 4:   build: {
 5:     target: ['es2020'],
 6:   },
 7:   resolve: {
 8:     mainFields: ['module'],
 9:   },
10:   plugins: [analog()],
11:   test: {
12:     globals: true,
13:     environment: 'jsdom',
14:     setupFiles: ['src/test-setup.ts'],
15:     include: ['**/*.spec.ts'],
16:     reporters: ['default'],
17:   },
18:   define: {
19:     'import.meta.vitest': mode !== 'production',
20:   },
21: }));
</file>

</files>
